public Boolean isValid(String s){

    if (math.mod(s.length(), 2) != 0)
        return false;
        
    Stack st = new Stack();

    for (String c : s.split('')) {
        if (isOpen(c))
            st.push(c);
        else 
            if (!isCorrectClose((String) st.pop(), c))
                return false;
    }   

    return true;
}

public static Boolean isOpen(String c){
    
    if (c == '(' || c == '{' || c == '[' )
        return true;
    else 
        return false;
}

public static Boolean isCorrectClose(String open, String close){

    if (open == '(' && close == ')')
        return true;
    else  if (open == '[' && close == ']')
        return true;
    else  if (open == '{' && close == '}')            
        return true;

    return false;
}



public with sharing class Stack {

    List<Object> s = new List<Object>();

    public Stack() {}


    public void push(Object obj) {
        //implement push  ###############
        if (s.size() == 0)
            s.add(obj);
        else
            s.add(0, obj);
    }

    public Object pop() {
        //implement pop   #################
        Object val = null;
        
        if (s.size() > 0)
            val = s.remove(0);
        
        return val;
    }

    public Integer size() {
        //implement size ############
        return s.size();
    }

    public Object peek(){
        //implement peek ############

        if (s.size() > 0)
            return s[0];

        return null;
    }

    public Boolean isEmpty() {
        //implement isEmpty ###########
        return s.isEmpty();
    }
}
